var documenterSearchIndex = {"docs":
[{"location":"api/#Library-Reference","page":"Library Reference","title":"Library Reference","text":"","category":"section"},{"location":"api/","page":"Library Reference","title":"Library Reference","text":"Modules = [AlgebraicPetri]","category":"page"},{"location":"api/#AlgebraicPetri.AlgebraicPetri","page":"Library Reference","title":"AlgebraicPetri.AlgebraicPetri","text":"Computing in the category of finite sets and Petri cospans\n\n\n\n\n\n","category":"module"},{"location":"api/#AlgebraicPetri.PetriCospan","page":"Library Reference","title":"AlgebraicPetri.PetriCospan","text":"Petri Cospan\n\nA morphism in the category of Open Petri Nets defined as a decorated cospan with a PetriFunctor as the decorator which maps the category of finite ordinals to the category Petri and a Petri.Model as the decoration\n\n\n\n\n\n","category":"type"},{"location":"api/#AlgebraicPetri.PetriCospanOb","page":"Library Reference","title":"AlgebraicPetri.PetriCospanOb","text":"Finite ordinal (natural number)\n\nAn object in the category of Open Petri Nets.\n\n\n\n\n\n","category":"type"},{"location":"api/#AlgebraicPetri.PetriDecorator-Tuple{Catlab.CategoricalAlgebra.FinSets.FinOrdFunction}","page":"Library Reference","title":"AlgebraicPetri.PetriDecorator","text":"AlgebraicPetri.PetriDecorator(f::FinOrdFunction)\n\nA functor from FinOrd to Set has a hom part, which given a hom f in FinOrd (a function n::Int->m::Int) should return a representation of F(f)::F(n)->F(m), here we implement this as a function that takes a Petri net of size n to a Petri net of size m, such that the transitions are mapped appropriately.\n\n\n\n\n\n","category":"method"},{"location":"api/#AlgebraicPetri.PetriDecorator-Tuple{Catlab.CategoricalAlgebra.FinSets.FinOrd}","page":"Library Reference","title":"AlgebraicPetri.PetriDecorator","text":"AlgebraicPetri.PetriDecorator(n::FinOrd)\n\nA functor from FinOrd to Set has an objects part, which given an object n in FinOrd (a natural number) should return a representation of F(n)::Set, sets can be represented as a predicate that takes an element and returns true if the element is in the set. Here we take any julia value and test whether it is a Petri net on n states.\n\n\n\n\n\n","category":"method"},{"location":"api/#AlgebraicPetri.PetriFunctor","page":"Library Reference","title":"AlgebraicPetri.PetriFunctor","text":"Petri Functor\n\nA functor from FinOrd to Petri defined as a PetriDecorator and a PetriLaxator\n\n\n\n\n\n","category":"type"},{"location":"api/#AlgebraicPetri.PetriLaxator-Tuple{Petri.Model,Petri.Model}","page":"Library Reference","title":"AlgebraicPetri.PetriLaxator","text":"AlgebraicPetri.PetriLaxator(p::Petri.Model, q::Petri.Model)\n\nThe laxitor takes a pair of decorations and returns the coproduct decoration For Petri nets, this encodes the idea that you shift the states of q up by the number of states in p.\n\n\n\n\n\n","category":"method"},{"location":"usage/#Basic-Usage","page":"Basic Usage","title":"Basic Usage","text":"","category":"section"},{"location":"usage/","page":"Basic Usage","title":"Basic Usage","text":"Basic usage of AlgebraicPetri.jl has been demonstrated through included example notebooks:","category":"page"},{"location":"usage/","page":"Basic Usage","title":"Basic Usage","text":"epidemiology.jl - Define a presentation on the category of Open Petri Nets that describe epidemiological models, create and model a few basic models such as SIR, SEIR, and SEIRD.\ncovid.jl - Extend the epidemiology presentation as defined in epidemiology.jl to include travel between regions/cities. Use this extra functionality to build a multi-city model of the emergent COVID-19 pandemic.","category":"page"},{"location":"#AlgebraicPetri.jl","page":"AlgebraicPetri.jl","title":"AlgebraicPetri.jl","text":"","category":"section"},{"location":"","page":"AlgebraicPetri.jl","title":"AlgebraicPetri.jl","text":"CurrentModule = AlgebraicPetri","category":"page"},{"location":"","page":"AlgebraicPetri.jl","title":"AlgebraicPetri.jl","text":"AlgebraicPetri.jl is a Julia library for building Petri net agent based models compositionally. This library acts as a bridge between Catlab.jl and Petri.jl. This package defines the category of Open Petri Nets as described in [Baez 2018].","category":"page"},{"location":"#Table-of-Contents","page":"AlgebraicPetri.jl","title":"Table of Contents","text":"","category":"section"},{"location":"","page":"AlgebraicPetri.jl","title":"AlgebraicPetri.jl","text":"Pages = [\n     \"usage.md\",\n     \"api.md\",\n     ]\nDepth = 2","category":"page"}]
}
