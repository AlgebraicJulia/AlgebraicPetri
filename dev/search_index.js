var documenterSearchIndex = {"docs":
[{"location":"examples/predation/lotka-volterra/","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"EditURL = \"https://github.com/AlgebraicJulia/AlgebraicPetri.jl/blob/master/examples/predation/lotka-volterra.jl\"","category":"page"},{"location":"examples/predation/lotka-volterra/#predation_example","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"","category":"section"},{"location":"examples/predation/lotka-volterra/","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"(Image: )","category":"page"},{"location":"examples/predation/lotka-volterra/","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"using AlgebraicPetri\n\nusing Petri: Model, Graph\nusing OrdinaryDiffEq\nusing Plots\n\nusing Catlab\nusing Catlab.Theories\nusing Catlab.Programs\nusing Catlab.CategoricalAlgebra.FreeDiagrams\nusing Catlab.WiringDiagrams\nusing Catlab.Graphics\n\ndisplay_wd(ex) = to_graphviz(ex, orientation=LeftToRight, labels=true);\nnothing #hide","category":"page"},{"location":"examples/predation/lotka-volterra/#Step-1:-Define-the-building-block-Petri-nets-needed-to-construct-the-model","page":"Lotka-Volterra Model","title":"Step 1: Define the building block Petri nets needed to construct the model","text":"","category":"section"},{"location":"examples/predation/lotka-volterra/","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"petriOb = codom(Open([1], PetriNet(1), [1]))\nbirth_petri = Open([1], PetriNet(1, (1, (1,1))), [1]);\nGraph(Model(apex(birth_petri)))","category":"page"},{"location":"examples/predation/lotka-volterra/","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"predation_petri = Open([1,2], PetriNet(2, ((1,2), (2,2))), [2]);\nGraph(Model(apex(predation_petri)))","category":"page"},{"location":"examples/predation/lotka-volterra/","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"death_petri = Open([1], PetriNet(1, (1, ())), [1]);\nGraph(Model(apex(death_petri)))","category":"page"},{"location":"examples/predation/lotka-volterra/#Step-2:-Define-a-presentation-of-the-free-biproduct-category","page":"Lotka-Volterra Model","title":"Step 2: Define a presentation of the free biproduct category","text":"","category":"section"},{"location":"examples/predation/lotka-volterra/","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"that encodes the domain specific information","category":"page"},{"location":"examples/predation/lotka-volterra/","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"@present Predation(FreeBiproductCategory) begin\n    prey::Ob\n    predator::Ob\n    birth::Hom(prey,prey)\n    predation::Hom(prey⊗predator,predator)\n    death::Hom(predator,predator)\nend;\n\nrabbits,wolves,birth,predation,death = generators(Predation);\n\nF(ex) = functor((OpenPetriNetOb, OpenPetriNet), ex, generators=Dict(\n                 rabbits=>petriOb,wolves=>petriOb,\n                 birth=>birth_petri, predation=>predation_petri, death=>death_petri));\nnothing #hide","category":"page"},{"location":"examples/predation/lotka-volterra/#Step-3:-Generate-models-using-the-hom-expression-or-program-notations","page":"Lotka-Volterra Model","title":"Step 3: Generate models using the hom expression or program notations","text":"","category":"section"},{"location":"examples/predation/lotka-volterra/","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"lotka_volterra = (birth ⊗ id(wolves)) ⋅ predation ⋅ death\nlotka_petri = apex(F(lotka_volterra))\ndisplay_wd(lotka_volterra)","category":"page"},{"location":"examples/predation/lotka-volterra/","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"Graph(Model(lotka_petri))","category":"page"},{"location":"examples/predation/lotka-volterra/","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"Generate appropriate vector fields, define parameters, and visualize solution","category":"page"},{"location":"examples/predation/lotka-volterra/","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"u0 = [100, 10];\np = [.3, .015, .7];\nprob = ODEProblem(vectorfield(lotka_petri),u0,(0.0,100.0),p);\nsol = solve(prob,Tsit5(),abstol=1e-8);\nplot(sol)","category":"page"},{"location":"examples/predation/lotka-volterra/","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"There is also a second syntax that is easier to write for programmers than the hom expression syntax. Here is an example of the same model as before along with a test of equivalency","category":"page"},{"location":"examples/predation/lotka-volterra/","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"lotka_volterra2 = @program Predation (r::prey, w::predator) begin\n  r_2 = birth(r)\n  w_2 = predation(r_2, w)\n  return death(w_2)\nend\nlotka_petri2 = apex(F(to_hom_expr(FreeBiproductCategory, lotka_volterra2)))\nlotka_petri == lotka_petri2","category":"page"},{"location":"examples/predation/lotka-volterra/#Step-4:-Extend-your-presentation-to-handle-more-complex-phenomena","page":"Lotka-Volterra Model","title":"Step 4: Extend your presentation to handle more complex phenomena","text":"","category":"section"},{"location":"examples/predation/lotka-volterra/","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"such as a small food chain","category":"page"},{"location":"examples/predation/lotka-volterra/","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"@present DualPredation <: Predation begin\n    Predator::Ob\n    Predation::Hom(predator⊗Predator,Predator)\n    Death::Hom(Predator,Predator)\nend;\n\nfish,Fish,Shark,birth,predation,death,Predation,Death = generators(DualPredation);\n\nF(ex) = functor((OpenPetriNetOb, OpenPetriNet), ex, generators=Dict(\n                 fish=>petriOb,Fish=>petriOb,\n                 birth=>birth_petri, predation=>predation_petri, death=>death_petri,\n                 Shark=>petriOb,Predation=>predation_petri, Death=>death_petri));\nnothing #hide","category":"page"},{"location":"examples/predation/lotka-volterra/","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"Define a new model where fish are eaten by Fish which are then eaten by Sharks","category":"page"},{"location":"examples/predation/lotka-volterra/","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"dual_lv = @program DualPredation (fish::prey, Fish::predator, Shark::Predator) begin\n  f_2 = birth(fish)\n  F_2 = predation(f_2, Fish)\n  F_3 = death(F_2)\n  S_2 = Predation(F_3, Shark)\n  S_3 = Death(S_2)\nend\ndisplay_wd(dual_lv)","category":"page"},{"location":"examples/predation/lotka-volterra/","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"dual_lv_petri = apex(F(to_hom_expr(FreeBiproductCategory, dual_lv)))\nGraph(Model(dual_lv_petri))","category":"page"},{"location":"examples/predation/lotka-volterra/","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"Generate a new solver, provide parameters, and analyze results","category":"page"},{"location":"examples/predation/lotka-volterra/","page":"Lotka-Volterra Model","title":"Lotka-Volterra Model","text":"u0 = [100, 10, 2];\np = [.3, .015, .7, .017, .35];\nprob = ODEProblem(vectorfield(dual_lv_petri),u0,(0.0,100.0),p);\nsol = solve(prob,Tsit5(),abstol=1e-6);\nplot(sol)","category":"page"},{"location":"api/#Library-Reference","page":"Library Reference","title":"Library Reference","text":"","category":"section"},{"location":"api/","page":"Library Reference","title":"Library Reference","text":"Modules = [AlgebraicPetri]","category":"page"},{"location":"api/#AlgebraicPetri.AlgebraicPetri","page":"Library Reference","title":"AlgebraicPetri.AlgebraicPetri","text":"Computing in the category of finite sets and Petri cospans\n\n\n\n\n\n","category":"module"},{"location":"examples/covid/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"EditURL = \"https://github.com/AlgebraicJulia/AlgebraicPetri.jl/blob/master/examples/covid/epidemiology.jl\"","category":"page"},{"location":"examples/covid/epidemiology/#epidemiology_example","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"","category":"section"},{"location":"examples/covid/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"(Image: )","category":"page"},{"location":"examples/covid/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"using AlgebraicPetri\nusing AlgebraicPetri.Epidemiology\n\nusing Petri: Model, Graph\nusing LabelledArrays\nusing OrdinaryDiffEq\nusing Plots\n\nusing Catlab\nusing Catlab.Theories\nusing Catlab.CategoricalAlgebra\nusing Catlab.WiringDiagrams\nusing Catlab.Graphics\nusing Catlab.Programs\n\ndisplay_wd(ex) = to_graphviz(ex, orientation=LeftToRight, labels=true);\nnothing #hide","category":"page"},{"location":"examples/covid/epidemiology/#SIR-Model:","page":"Basic Epidemiology Models","title":"SIR Model:","text":"","category":"section"},{"location":"examples/covid/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"define model","category":"page"},{"location":"examples/covid/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"sir = transmission ⋅ recovery","category":"page"},{"location":"examples/covid/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"get resulting petri net as a C-Set","category":"page"},{"location":"examples/covid/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"cset_sir = apex(F_epi(sir));\ndisplay_wd(sir)","category":"page"},{"location":"examples/covid/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"Use Petri.jl to visualize the C-Set","category":"page"},{"location":"examples/covid/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"Graph(Model(cset_sir))","category":"page"},{"location":"examples/covid/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"define initial states and transition rates, then create, solve, and visualize ODE problem","category":"page"},{"location":"examples/covid/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"u0 = LVector(S=10, I=1, R=0);\np = LVector(inf=0.4, rec=0.4);\nnothing #hide","category":"page"},{"location":"examples/covid/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"The C-Set representation has direct support for generating a DiffEq vector field","category":"page"},{"location":"examples/covid/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"prob = ODEProblem(vectorfield(cset_sir),u0,(0.0,7.5),p);\nsol = solve(prob,Tsit5())\n\nplot(sol)","category":"page"},{"location":"examples/covid/epidemiology/#SEIR-Model:","page":"Basic Epidemiology Models","title":"SEIR Model:","text":"","category":"section"},{"location":"examples/covid/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"define model","category":"page"},{"location":"examples/covid/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"seir = @program InfectiousDiseases (s::S,i::I) begin\n    i2 = illness(exposure(s,i))\n    return recovery([i,i2])\nend\nseir = to_hom_expr(FreeBiproductCategory, seir)","category":"page"},{"location":"examples/covid/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"here we convert the C-Set decoration to a Petri.jl model to use its StochasticDifferentialEquations support","category":"page"},{"location":"examples/covid/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"p_seir = apex(F_epi(seir));\n\ndisplay_wd(seir)","category":"page"},{"location":"examples/covid/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"Graph(Model(p_seir))","category":"page"},{"location":"examples/covid/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"define initial states and transition rates, then create, solve, and visualize ODE problem","category":"page"},{"location":"examples/covid/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"u0 = LVector(S=10, E=1, I=0, R=0);\np = LVector(exp=.9, ill=.2, rec=.5);\n\nprob = ODEProblem(vectorfield(p_seir),u0,(0.0,15.0),p);\nsol = solve(prob,Tsit5())\n\nplot(sol)","category":"page"},{"location":"examples/covid/epidemiology/#SEIRD-Model:","page":"Basic Epidemiology Models","title":"SEIRD Model:","text":"","category":"section"},{"location":"examples/covid/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"define model","category":"page"},{"location":"examples/covid/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"seird = @program InfectiousDiseases (s::S,i::I) begin\n    i_all = [i, illness(exposure(s,i))]\n    return recovery(i_all), death(i_all)\nend\nseird = to_hom_expr(FreeBiproductCategory, seird)","category":"page"},{"location":"examples/covid/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"get resulting petri net and visualize model","category":"page"},{"location":"examples/covid/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"p_seird = apex(F_epi(seird));\n\ndisplay_wd(seird)","category":"page"},{"location":"examples/covid/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"Graph(Model(p_seird))","category":"page"},{"location":"examples/covid/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"define initial states and transition rates, then create, solve, and visualize ODE problem","category":"page"},{"location":"examples/covid/epidemiology/","page":"Basic Epidemiology Models","title":"Basic Epidemiology Models","text":"u0 = LVector(S=10, E=1, I=0, R=0, D=0);\np = LVector(exp=0.9, ill=0.2, rec=0.5, death=0.1);\n\nprob = ODEProblem(vectorfield(p_seird),u0,(0.0,15.0),p);\nsol = solve(prob,Tsit5())\n\nplot(sol)","category":"page"},{"location":"examples/covid/chime/chime-cset/","page":"-","title":"-","text":"EditURL = \"https://github.com/AlgebraicJulia/AlgebraicPetri.jl/blob/master/examples/covid/chime/chime-cset.jl\"","category":"page"},{"location":"examples/covid/chime/chime-cset/","page":"-","title":"-","text":"using AlgebraicPetri\nusing Petri: Model, Graph\nusing OrdinaryDiffEq\nusing Plots\nusing Catlab.Meta\nusing JSON\n\nimport OrdinaryDiffEq: ODEProblem\nODEProblem(p::LabelledReactionNet, t) = ODEProblem(vectorfield(p), concentrations(p), t, rates(p))","category":"page"},{"location":"examples/covid/chime/chime-cset/","page":"-","title":"-","text":"help capture JSON of defined functions","category":"page"},{"location":"examples/covid/chime/chime-cset/","page":"-","title":"-","text":"macro capture(funcname, exname, ex)\n    quote\n        $(esc(exname)) = $(repr(strip_lines(ex, recurse=true)))\n        $(esc(funcname)) = $ex\n    end\nend\n\n@capture γ γ_text 1/14\n@capture β β_text t->begin\n    policy_days = [20,60,120] .+ 17\n    contact_rate = 0.05\n    pol = findfirst(x->t<=x, policy_days) # array of days when policy changes\n    growth_rate = pol == 1 ? 0.0 : (2^(1/((pol-1)*5)) - 1) # growth rate depending on policy\n    return (growth_rate + γ) / 990 * (1-contact_rate) # calculate rate of infection\nend\n\nsir_cset= LabelledReactionNet{Function, Float64}((:S=>990, :I=>10, :R=>0), (:inf, β)=>((:S, :I)=>(:I,:I)), (:rec, t->γ)=>(:I=>:R))\n\nGraph(Model(sir_cset))\n\nprob = ODEProblem(sir_cset, (17.0, 120.0))\nsol = OrdinaryDiffEq.solve(prob,Tsit5())\nplot(sol)\n\n# Getting Sharable JSON\nsir_cset_string = LabelledReactionNet{String, Int}((:S=>990, :I=>10, :R=>0), (:inf, β_text)=>((:S, :I)=>(:I,:I)), (:rec, γ_text)=>(:I=>:R))\nJSON.print(sir_cset_string.tables, 2)","category":"page"},{"location":"examples/covid/chime/chime/","page":"-","title":"-","text":"EditURL = \"https://github.com/AlgebraicJulia/AlgebraicPetri.jl/blob/master/examples/covid/chime/chime.jl\"","category":"page"},{"location":"examples/covid/chime/chime/","page":"-","title":"-","text":"using AlgebraicPetri\nusing AlgebraicPetri.Epidemiology\nusing Petri: Model, Graph\nusing OrdinaryDiffEq\nusing LabelledArrays\nusing Plots\nusing Catlab.Theories\nusing Catlab.CategoricalAlgebra.FreeDiagrams\nusing Catlab.Graphics\n\ndisplay_wd(ex) = to_graphviz(ex, orientation=LeftToRight, labels=true);\n\nsir = transmission ⋅ recovery\n\np_sir = apex(F_epi(sir));\ndisplay_wd(sir)","category":"page"},{"location":"examples/covid/chime/chime/","page":"-","title":"-","text":"Graph(Model(p_sir))\n\nu0 = LVector(S=990, I=10, R=0);\nt_span = (17.0,120.0)\n\nγ = 1/14\nβ = t->begin\n    policy_days = [20,60,120] .+ 17\n    contact_rate = 0.05\n    pol = findfirst(x->t<=x, policy_days) # array of days when policy changes\n    growth_rate = pol == 1 ? 0.0 : (2^(1/((pol-1)*5)) - 1) # growth rate depending on policy\n    return (growth_rate + γ) / 990 * (1-contact_rate) # calculate rate of infection\nend\np = LVector(inf=β, rec=γ);\n\nprob = ODEProblem(vectorfield(p_sir),u0,t_span,p)\nsol = OrdinaryDiffEq.solve(prob,Tsit5())\nplot(sol)\npng(\"ode-chime.png\")","category":"page"},{"location":"#AlgebraicPetri.jl","page":"AlgebraicPetri.jl","title":"AlgebraicPetri.jl","text":"","category":"section"},{"location":"","page":"AlgebraicPetri.jl","title":"AlgebraicPetri.jl","text":"CurrentModule = AlgebraicPetri","category":"page"},{"location":"","page":"AlgebraicPetri.jl","title":"AlgebraicPetri.jl","text":"AlgebraicPetri.jl is a Julia library for building Petri net agent based models compositionally. This library acts as a bridge between Catlab.jl and Petri.jl. This package defines the category of Open Petri Nets as described in [Baez 2018].","category":"page"},{"location":"examples/covid/coexist/coexist/","page":"COEXIST Multi-Generational COVID Model","title":"COEXIST Multi-Generational COVID Model","text":"EditURL = \"https://github.com/AlgebraicJulia/AlgebraicPetri.jl/blob/master/examples/covid/coexist/coexist.jl\"","category":"page"},{"location":"examples/covid/coexist/coexist/#coexist_example","page":"COEXIST Multi-Generational COVID Model","title":"COEXIST Multi-Generational COVID Model","text":"","category":"section"},{"location":"examples/covid/coexist/coexist/","page":"COEXIST Multi-Generational COVID Model","title":"COEXIST Multi-Generational COVID Model","text":"(Image: )","category":"page"},{"location":"examples/covid/coexist/coexist/","page":"COEXIST Multi-Generational COVID Model","title":"COEXIST Multi-Generational COVID Model","text":"using AlgebraicPetri\nusing AlgebraicPetri.Epidemiology\n\nusing Petri\nusing LabelledArrays\nusing OrdinaryDiffEq\nusing Plots\nusing JSON\n\nusing Catlab\nusing Catlab.Theories\nusing Catlab.CategoricalAlgebra\nusing Catlab.Programs\nusing Catlab.WiringDiagrams\nusing Catlab.Graphics\nusing Catlab.Graphics.Graphviz: run_graphviz\n\ndisplay_wd(ex) = to_graphviz(ex, orientation=LeftToRight, labels=true);\nnothing #hide","category":"page"},{"location":"examples/covid/coexist/coexist/","page":"COEXIST Multi-Generational COVID Model","title":"COEXIST Multi-Generational COVID Model","text":"Define some helper types where transition rates are real numbers and populations are natural numbers","category":"page"},{"location":"examples/covid/coexist/coexist/","page":"COEXIST Multi-Generational COVID Model","title":"COEXIST Multi-Generational COVID Model","text":"const EpiRxnNet = LabelledReactionNet{Number,Int};\nconst OpenEpiRxnNet = OpenLabelledReactionNet{Number,Int};\nconst OpenEpiRxnNetOb = OpenLabelledReactionNetOb{Number,Int};\nnothing #hide","category":"page"},{"location":"examples/covid/coexist/coexist/","page":"COEXIST Multi-Generational COVID Model","title":"COEXIST Multi-Generational COVID Model","text":"Define helper functions for defining the two types of reactions in an epidemiology Model. Either a state spontaneously changes, or one state causes another to change","category":"page"},{"location":"examples/covid/coexist/coexist/","page":"COEXIST Multi-Generational COVID Model","title":"COEXIST Multi-Generational COVID Model","text":"ob(x::Symbol,n::Int) = codom(Open([x], EpiRxnNet(x=>n), [x]));\nfunction spontaneous_petri(transition::Symbol, rate::Number,\n                           s::Symbol, s₀::Int,\n                           t::Symbol, t₀::Int)\n    Open([s], EpiRxnNet((s=>s₀,t=>t₀), (transition,rate)=>(s=>t)), [t])\nend;\nfunction exposure_petri(transition::Symbol, rate::Number,\n                        s::Symbol, s₀::Int,\n                        e::Symbol, e₀::Int,\n                        t::Symbol, t₀::Int)\n    Open([s, e], EpiRxnNet((s=>s₀,e=>e₀,t=>t₀), (transition,rate)=>((s,e)=>(t,e))), [t])\nend;\nnothing #hide","category":"page"},{"location":"examples/covid/coexist/coexist/","page":"COEXIST Multi-Generational COVID Model","title":"COEXIST Multi-Generational COVID Model","text":"Set arrays of initial conditions and rates to use in functor","category":"page"},{"location":"examples/covid/coexist/coexist/","page":"COEXIST Multi-Generational COVID Model","title":"COEXIST Multi-Generational COVID Model","text":"pop = [8044056, 7642473, 8558707, 9295024,8604251,9173465,7286777,5830635,3450616] .- (4*1000);\nN = sum(pop) + length(pop)*4*1000;\nsocial_mixing_rate =\n  [[5.10316562022642,1.28725377551533,1.30332531065247,2.31497083312315,1.1221598200343,0.606327539457772,0.453266757158743,0.177712174722219,0.0111726265254263],\n   [1.15949254996891,8.00118824220649,1.24977685411394,1.51298690806342,1.88877951844257,0.835804485358679,0.431371281973645,0.343104864504218,0.0324429672946592],\n   [1.19314902456243,1.2701954426234,3.55182053724384,1.81286158254244,1.80561825747571,1.29108026766182,0.708613434860661,0.248559044477893,0.0215323291988856],\n   [1.83125260045684,1.32872195974583,1.56648238384012,2.75491288061819,1.94613663227464,1.2348814962672,0.863177586322153,0.244623623638873,0.0394364256673532],\n   [0.910395333788561,1.7011898591446,1.60014517035071,1.99593275526656,2.90894801031624,1.37683234043657,0.859519958701156,0.488960115017174,0.110509077357166],\n   [0.56560186656657,0.865574490657954,1.31557291022074,1.45621698394508,1.58310342861768,1.92835669973181,0.963568493650797,0.463041280007004,0.183483677017087],\n   [0.544954016221808,0.575775829452094,0.930622416907882,1.31190809759635,1.27375718214796,1.24189546255302,1.32825334016313,0.66235513907445,0.0946971569608397],\n   [0.319717318035767,0.68528632728864,0.488468642570909,0.556345582530282,1.08429412751444,0.893028152305907,0.991137484161889,1.17651345255182,0.12964732712923],\n   [0.201086389216809,0.648252461859761,0.423327560644352,0.897268061280577,2.4516024037254,3.54014694719397,1.41761515077768,1.29700599099082,1.0189817510854]];\n\nfatality_rate = [0.00856164, 0.03768844, 0.02321319, 0.04282494, 0.07512237, 0.12550367, 0.167096  , 0.37953452, 0.45757006];\nnothing #hide","category":"page"},{"location":"examples/covid/coexist/coexist/","page":"COEXIST Multi-Generational COVID Model","title":"COEXIST Multi-Generational COVID Model","text":"Extend the infectious disease presentation to handle the more complex version of SEIRD that the COEXIST model uses with asymptomatic infection, multiple stages of infection, and multiple stages of recovery","category":"page"},{"location":"examples/covid/coexist/coexist/","page":"COEXIST Multi-Generational COVID Model","title":"COEXIST Multi-Generational COVID Model","text":"@present EpiCoexist <: InfectiousDiseases begin\n    I2::Ob\n    A::Ob\n    R2::Ob\n\n    exposure_e::Hom(S⊗E,E)\n    exposure_i2::Hom(S⊗I2,E)\n    exposure_a::Hom(S⊗A,E)\n    progression::Hom(I,I2)\n    asymptomatic_infection::Hom(E,A)\n    recover_late::Hom(R,R2)\n    asymptomatic_recovery::Hom(A,R)\n    recovery2::Hom(I2,R)\n    death2::Hom(I2,D)\nend;\n\nS,E,I,R,D,I2,A,R2,transmission,exposure,illness,recovery,death,exposure_e,exposure_i2,exposure_a,progression,asymptomatic_infection,recover_late,asymptomatic_recovery,recovery2, death2 = generators(EpiCoexist);\nnothing #hide","category":"page"},{"location":"examples/covid/coexist/coexist/","page":"COEXIST Multi-Generational COVID Model","title":"COEXIST Multi-Generational COVID Model","text":"Define a functor from the presentation to the building block Petri nets that define these operations","category":"page"},{"location":"examples/covid/coexist/coexist/","page":"COEXIST Multi-Generational COVID Model","title":"COEXIST Multi-Generational COVID Model","text":"F(ex, n) = functor((OpenEpiRxnNetOb, OpenEpiRxnNet), ex, generators=Dict(\n    S=>ob(Symbol(:S, n), pop[n]),\n    E=>ob(Symbol(:E, n), 1000),\n    A=>ob(Symbol(:A, n), 1000),\n    I=>ob(Symbol(:I, n), 1000),\n    I2=>ob(Symbol(:I2, n), 1000),\n    R=>ob(Symbol(:R, n), 0),\n    R2=>ob(Symbol(:R2, n), 0),\n    D=>ob(Symbol(:D, n), 0),\n    transmission=>exposure_petri(:transmission, 0, :S, 0, :I, 0, :I, 0),\n    exposure=>exposure_petri(Symbol(:exp_, n), 1*social_mixing_rate[n][n]/pop[n], Symbol(:S,n), pop[n], Symbol(:I,n), 1000, Symbol(:E,n), 1000),\n    exposure_e=>exposure_petri(Symbol(:exp_e, n), .01*social_mixing_rate[n][n]/pop[n], Symbol(:S,n), pop[n], Symbol(:E,n),1000, Symbol(:E,n),1000),\n    exposure_i2=>exposure_petri(Symbol(:exp_i2, n), 6*social_mixing_rate[n][n]/pop[n], Symbol(:S,n), pop[n], Symbol(:I2,n), 1000, Symbol(:E,n),1000),\n    exposure_a=>exposure_petri(Symbol(:exp_a, n), 5*social_mixing_rate[n][n]/pop[n], Symbol(:S,n), pop[n], Symbol(:A,n),1000, Symbol(:E,n),1000),\n    progression=>spontaneous_petri(Symbol(:prog_, n), .25, Symbol(:I,n), 1000, Symbol(:I2,n), 1000),\n    asymptomatic_infection=>spontaneous_petri(Symbol(:asymp_, n), .86/.14*.2, Symbol(:E,n), 1000, Symbol(:A,n), 1000),\n    illness=>spontaneous_petri(Symbol(:ill_, n), .2, Symbol(:E,n), 1000, Symbol(:I,n), 1000),\n    asymptomatic_recovery=>spontaneous_petri(Symbol(:arec_, n), 1/15, Symbol(:A,n), 1000, Symbol(:R,n), 0),\n    recovery=>spontaneous_petri(Symbol(:rec_, n), 0, Symbol(:I,n), 0, Symbol(:R,n), 0),\n    recovery2=>spontaneous_petri(Symbol(:rec_, n), 1/6, Symbol(:I2,n), 1000, Symbol(:R,n), 0),\n    recover_late=>spontaneous_petri(Symbol(:rec2_, n), 1/15, Symbol(:R,n), 0, Symbol(:R2,n), 0),\n    death=>spontaneous_petri(Symbol(:death_, n), 0, Symbol(:I,n), 0, Symbol(:D,n), 0),\n    death2=>spontaneous_petri(Symbol(:death2_, n), (1/15)*(fatality_rate[n]/(1-fatality_rate[n])), Symbol(:I2,n), 1000, Symbol(:D,n), 0)));\nnothing #hide","category":"page"},{"location":"examples/covid/coexist/coexist/","page":"COEXIST Multi-Generational COVID Model","title":"COEXIST Multi-Generational COVID Model","text":"Define the COEXIST model using the @program macro","category":"page"},{"location":"examples/covid/coexist/coexist/","page":"COEXIST Multi-Generational COVID Model","title":"COEXIST Multi-Generational COVID Model","text":"coexist = @program EpiCoexist (s::S, e::E, i::I, i2::I2, a::A, r::R, r2::R2, d::D) begin\n    e_2 = exposure(s, i)\n    e_3 = exposure_i2(s, i2)\n    e_4 = exposure_a(s, a)\n    e_5 = exposure_e(s, e)\n    e_all = [e, e_2, e_3, e_4, e_5]\n    a_2 = asymptomatic_infection(e_all)\n    a_all = [a, a_2]\n    r_2 = asymptomatic_recovery(a_all)\n    i_2 = illness(e_all)\n    i_all = [i, i_2]\n    i2_2 = progression(i)\n    i2_all = [i2, i2_2]\n    d_2 = death2(i2_all)\n    r_3 = recovery2(i2_all)\n    r_all = [r, r_2, r_3]\n    r2_2 = recover_late(r_all)\n    r2_all = [r2, r2_2]\n    d_all = [d, d_2]\n    return s, e_all, i_all, i2_all, a_all, r_all, r2_all, d_all\nend;\ncoexist = to_hom_expr(FreeBiproductCategory, coexist);\ndisplay_wd(coexist)","category":"page"},{"location":"examples/covid/coexist/coexist/","page":"COEXIST Multi-Generational COVID Model","title":"COEXIST Multi-Generational COVID Model","text":"Define a new presentation and functor to use in modeling cross exposure between two sets of populations","category":"page"},{"location":"examples/covid/coexist/coexist/","page":"COEXIST Multi-Generational COVID Model","title":"COEXIST Multi-Generational COVID Model","text":"@present EpiCrossExposure(FreeBiproductCategory) begin\n    (S,E,A,I,I2,R,R2,D)::Ob\n    (S′,E′,A′,I′,I2′,R′,R2′,D′)::Ob\n\n    exposure::Hom(S⊗I′,E)\n    exposure_e::Hom(S⊗E′,E)\n    exposure_a::Hom(S⊗A′,E)\n    exposure_i2::Hom(S⊗I2′,E)\n    exposure′::Hom(S′⊗I,E′)\n    exposure_e′::Hom(S′⊗E,E′)\n    exposure_a′::Hom(S′⊗A,E′)\n    exposure_i2′::Hom(S′⊗I2,E′)\nend;\n\nce_S,ce_E,ce_A,ce_I,ce_I2,ce_R,ce_R2,ce_D, ce_S′,ce_E′,ce_A′,ce_I′,ce_I2′,ce_R′,ce_R2′,ce_D′, ce_exposure, ce_exposure_e, ce_exposure_a, ce_exposure_i2, ce_exposure′, ce_exposure_e′, ce_exposure_a′, ce_exposure_i2′ = generators(EpiCrossExposure);\n\nF_cx(ex, x,y) = functor((OpenEpiRxnNetOb, OpenEpiRxnNet), ex, generators=Dict(\n    ce_S=>ob(Symbol(:S, x), pop[x]),\n    ce_E=>ob(Symbol(:E, x), 1000),\n    ce_A=>ob(Symbol(:A, x), 1000),\n    ce_I=>ob(Symbol(:I, x), 1000),\n    ce_I2=>ob(Symbol(:I2, x), 1000),\n    ce_R=>ob(Symbol(:R, x), 0),\n    ce_R2=>ob(Symbol(:R2, x), 0),\n    ce_D=>ob(Symbol(:D, x), 0),\n    ce_S′=>ob(Symbol(:S, y), pop[y]),\n    ce_E′=>ob(Symbol(:E, y), 1000),\n    ce_A′=>ob(Symbol(:A, y), 1000),\n    ce_I′=>ob(Symbol(:I, y), 1000),\n    ce_I2′=>ob(Symbol(:I2, y), 1000),\n    ce_R′=>ob(Symbol(:R, y), 0),\n    ce_R2′=>ob(Symbol(:R2, y), 0),\n    ce_D′=>ob(Symbol(:D, y), 0),\n    ce_exposure=>exposure_petri(Symbol(:exp_, x,y), 1*social_mixing_rate[x][y]/(pop[x]+pop[y]), Symbol(:S,x), pop[x], Symbol(:I,y), 1000, Symbol(:E,x), 1000),\n    ce_exposure_e=>exposure_petri(Symbol(:exp_e, x,y), .01*social_mixing_rate[x][y]/(pop[x]+pop[y]), Symbol(:S,x), pop[x], Symbol(:E,y),1000, Symbol(:E,x),1000),\n    ce_exposure_a=>exposure_petri(Symbol(:exp_a, x,y), 5*social_mixing_rate[x][y]/(pop[x]+pop[y]), Symbol(:S,x), pop[x], Symbol(:A,y),1000, Symbol(:E,x),1000),\n    ce_exposure_i2=>exposure_petri(Symbol(:exp_i2, x,y), 6*social_mixing_rate[x][y]/(pop[x]+pop[y]), Symbol(:S,x), pop[x], Symbol(:I2,y), 1000, Symbol(:E,x),1000),\n    ce_exposure′=>exposure_petri(Symbol(:exp_, y,x), 1*social_mixing_rate[y][x]/(pop[x]+pop[y]), Symbol(:S,y), pop[y], Symbol(:I,x), 1000, Symbol(:E,y), 1000),\n    ce_exposure_e′=>exposure_petri(Symbol(:exp_e, y,x), .01*social_mixing_rate[y][x]/(pop[x]+pop[y]), Symbol(:S,y), pop[y], Symbol(:E,x),1000, Symbol(:E,y),1000),\n    ce_exposure_a′=>exposure_petri(Symbol(:exp_a, y,x), 5*social_mixing_rate[y][x]/(pop[x]+pop[y]), Symbol(:S,y), pop[y], Symbol(:A,x),1000, Symbol(:E,y),1000),\n    ce_exposure_i2′=>exposure_petri(Symbol(:exp_i2, y,x), 6*social_mixing_rate[y][x]/(pop[x]+pop[y]), Symbol(:S,y), pop[y], Symbol(:I2,x), 1000, Symbol(:E,y),1000)\n));\nnothing #hide","category":"page"},{"location":"examples/covid/coexist/coexist/","page":"COEXIST Multi-Generational COVID Model","title":"COEXIST Multi-Generational COVID Model","text":"Use this new presentation to define a model of cross exposure between two populations","category":"page"},{"location":"examples/covid/coexist/coexist/","page":"COEXIST Multi-Generational COVID Model","title":"COEXIST Multi-Generational COVID Model","text":"crossexposure = @program EpiCrossExposure (s::S, e::E, i::I, i2::I2, a::A, r::R, r2::R2, d::D,\n                                           s′::S′, e′::E′, i′::I′, i2′::I2′, a′::A′, r′::R′, r2′::R2′, d′::D′) begin\n    e_2 = exposure(s, i′)\n    e_3 = exposure_i2(s, i2′)\n    e_4 = exposure_a(s, a′)\n    e_5 = exposure_e(s, e′)\n    e_all = [e, e_2, e_3, e_4, e_5]\n    e′_2 = exposure′(s′, i)\n    e′_3 = exposure_i2′(s′, i2)\n    e′_4 = exposure_a′(s′, a)\n    e′_5 = exposure_e′(s′, e_all)\n    e′_all = [e′, e′_2, e′_3, e′_4, e′_5]\n    return s, e_all, i, i2, a, r, r2, d,\n           s′, e′_all, i′, i2′, a′, r′, r2′, d′\nend;\ncrossexposure = to_hom_expr(FreeBiproductCategory, crossexposure);\ndisplay_wd(crossexposure)","category":"page"},{"location":"examples/covid/coexist/coexist/","page":"COEXIST Multi-Generational COVID Model","title":"COEXIST Multi-Generational COVID Model","text":"To combine these two models, we need a final presentation that enables us to model 3 populations, each with their own COEXIST model, and interact through cross exposure","category":"page"},{"location":"examples/covid/coexist/coexist/","page":"COEXIST Multi-Generational COVID Model","title":"COEXIST Multi-Generational COVID Model","text":"@present ThreeCoexist(FreeBiproductCategory) begin\n    (Pop1,Pop2,Pop3)::Ob\n\n    crossexp12::Hom(Pop1⊗Pop2,Pop1⊗Pop2)\n    crossexp13::Hom(Pop1⊗Pop3,Pop1⊗Pop3)\n    crossexp23::Hom(Pop2⊗Pop3,Pop2⊗Pop3)\n    coex1::Hom(Pop1,Pop1)\n    coex2::Hom(Pop2,Pop2)\n    coex3::Hom(Pop3,Pop3)\nend;\nPop1, Pop2, Pop3, crossexp12, crossexp13, crossexp23, coex1, coex2, coex3 = generators(ThreeCoexist);\n\nF_tcx(ex) = functor((OpenEpiRxnNetOb, OpenEpiRxnNet), ex, generators=Dict(\n    Pop1=>F(otimes(S,E,I,I2,A,R,R2,D),3),\n    Pop2=>F(otimes(S,E,I,I2,A,R,R2,D),4),\n    Pop3=>F(otimes(S,E,I,I2,A,R,R2,D),5),\n    crossexp12=>F_cx(crossexposure,3,4),\n    crossexp13=>F_cx(crossexposure,3,5),\n    crossexp23=>F_cx(crossexposure,4,5),\n    coex1=>F(coexist,3),\n    coex2=>F(coexist,4),\n    coex3=>F(coexist,5)\n    ));\nnothing #hide","category":"page"},{"location":"examples/covid/coexist/coexist/","page":"COEXIST Multi-Generational COVID Model","title":"COEXIST Multi-Generational COVID Model","text":"Use this presentation to define this three-generational COEXIST model","category":"page"},{"location":"examples/covid/coexist/coexist/","page":"COEXIST Multi-Generational COVID Model","title":"COEXIST Multi-Generational COVID Model","text":"threeNCoexist = @program ThreeCoexist (pop1::Pop1, pop2::Pop2, pop3::Pop3) begin\n    pop1′, pop2′ = crossexp12(pop1, pop2)\n    pop1′′, pop3′ = crossexp13(pop1′, pop3)\n    pop2′′, pop3′′ = crossexp23(pop2′, pop3′)\n    return coex1(pop1′′), coex2(pop2′′), coex3(pop3′′)\nend;\nthreeNCoexist = to_hom_expr(FreeBiproductCategory, threeNCoexist);\ndisplay_wd(threeNCoexist)","category":"page"},{"location":"examples/covid/coexist/coexist/","page":"COEXIST Multi-Generational COVID Model","title":"COEXIST Multi-Generational COVID Model","text":"Once this final model has been defined, we can use the functors to get the underlying Petri net","category":"page"},{"location":"examples/covid/coexist/coexist/","page":"COEXIST Multi-Generational COVID Model","title":"COEXIST Multi-Generational COVID Model","text":"threeNCoexist_algpetri = apex(F_tcx(threeNCoexist))\nthreeNCoexist_petri = Petri.Model(threeNCoexist_algpetri)\nGraph(threeNCoexist_petri)","category":"page"},{"location":"examples/covid/coexist/coexist/","page":"COEXIST Multi-Generational COVID Model","title":"COEXIST Multi-Generational COVID Model","text":"We can JSON to convert this Petri net into an easily shareable format","category":"page"},{"location":"examples/covid/coexist/coexist/","page":"COEXIST Multi-Generational COVID Model","title":"COEXIST Multi-Generational COVID Model","text":"JSON.print(threeNCoexist_algpetri.tables)","category":"page"},{"location":"examples/covid/coexist/coexist/","page":"COEXIST Multi-Generational COVID Model","title":"COEXIST Multi-Generational COVID Model","text":"We can now easily generate a solver for DifferentialEquations.jl because we encoded the intitial parameters and rates throughout the construction of the model, the final result knows its concentrations and rates.","category":"page"},{"location":"examples/covid/coexist/coexist/","page":"COEXIST Multi-Generational COVID Model","title":"COEXIST Multi-Generational COVID Model","text":"tspan = (0.0,100.0);\nprob = ODEProblem(threeNCoexist_petri,concentrations(threeNCoexist_algpetri),tspan,rates(threeNCoexist_algpetri));\nsol = solve(prob,Tsit5());\nplot(sol, xlabel=\"Time\", ylabel=\"Number of people\")","category":"page"},{"location":"examples/covid/coexist/coexist/","page":"COEXIST Multi-Generational COVID Model","title":"COEXIST Multi-Generational COVID Model","text":"If we want to model other intervention methods, we can simply adjust the rates of exposure to represent stay at home orders and mask wearing. Because of how we have defined our rates, we can simply update the social mixing rates, and resolve the model.","category":"page"},{"location":"examples/covid/coexist/coexist/","page":"COEXIST Multi-Generational COVID Model","title":"COEXIST Multi-Generational COVID Model","text":"for i in 1:length(social_mixing_rate)\n  for j in 1:length(social_mixing_rate[1])\n    if i != j\n      social_mixing_rate[i][j] = social_mixing_rate[i][j] / 10;\n    else\n      social_mixing_rate[i][j] = social_mixing_rate[i][j] / 5;\n    end\n  end\nend\nthreeNCoexist_algpetri = apex(F_tcx(threeNCoexist));\nthreeNCoexist_petri = Petri.Model(threeNCoexist_algpetri);\n\nprob = ODEProblem(threeNCoexist_petri,concentrations(threeNCoexist_algpetri),tspan,rates(threeNCoexist_algpetri));\nsol = solve(prob,Tsit5());\nplot(sol, xlabel=\"Time\", ylabel=\"Number of people\")","category":"page"}]
}
